# Zabbix with Let's Encrypt in a Docker Swarm

# Configure Traefik and create secrets for storing the passwords on the Docker Swarm manager node before applying the configuration.
# Traefik configuration: https://github.com/heyValdemar/traefik-letsencrypt-docker-swarm

# Create a secret for storing the password for Zabbix database using the command:
# printf "YourPassword" | docker secret create zabbix-postgres-password -

# Clear passwords from bash history using the command:
# history -c && history -w

# Run zabbix-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
# Run docker stack ps zabbix | grep zabbix_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.

# Deploy Zabbix in a Docker Swarm using the command:
# docker stack deploy -c zabbix-traefik-letsencrypt-docker-swarm.yml zabbix

version: '3.8'

x-default-opts:
  &default-opts
  logging:
    options:
      max-size: "10m"

networks:
  zabbix-network:
    driver: overlay
  traefik-network:
    external: true

volumes:
  zabbix-postgres:
  zabbix-postgres-backups:

secrets:
  zabbix-postgres-password:
    external: true

services:
  postgres:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    volumes:
      - zabbix-postgres:/var/lib/postgresql/data
    environment:
      # Database name (replace with yours)
      POSTGRES_DB: zabbixdb
      # Database user (replace with yours)
      POSTGRES_USER: zabbixdbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/zabbix-postgres-password
    networks:
      - zabbix-network
    secrets:
      - zabbix-postgres-password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 1G

  zabbix:
    <<: *default-opts
    # Image tag (replace with yours)
    image: zabbix/zabbix-server-pgsql:6.2.0-ubuntu
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      # Database name (replace with yours)
      POSTGRES_DB: zabbixdb
      # Database user (replace with yours)
      POSTGRES_USER: zabbixdbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/zabbix-postgres-password
      ZBX_VALUECACHESIZE: 64M
      ZBX_CACHESIZE: 128M
      ZBX_TRENDCACHESIZE: 128M
    networks:
      - zabbix-network
    ports:
      - "10051:10051"
    secrets:
      - zabbix-postgres-password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '1.75'
          memory: 8G
        reservations:
          cpus: '1.35'
          memory: 4G
    depends_on:
      - postgres

  web:
    <<: *default-opts
    # Image tag (replace with yours)
    image: zabbix/zabbix-web-nginx-pgsql:6.2.0-ubuntu
    environment:
      DB_SERVER_HOST: postgres
      DB_SERVER_PORT: 5432
      # Database name (replace with yours)
      POSTGRES_DB: zabbixdb
      # Database user (replace with yours)
      POSTGRES_USER: zabbixdbuser
      POSTGRES_PASSWORD_FILE: /run/secrets/zabbix-postgres-password
      ZBX_SERVER_HOST: zabbix
      ZBX_SERVER_PORT: 10051
      # Timezone (replace with yours) https://www.php.net/manual/en/timezones.php
      PHP_TZ: Europe/Prague
    networks:
      - zabbix-network
      - traefik-network
    secrets:
      - zabbix-postgres-password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '1.75'
          memory: 4G
        reservations:
          cpus: '0.35'
          memory: 1G
      labels:
        - "traefik.enable=true"
        # Zabbix URL (replace with yours)
        - "traefik.http.routers.zabbix.rule=Host(`zabbix.heyvaldemar.net`)"
        - "traefik.http.routers.zabbix.service=zabbix"
        - "traefik.http.routers.zabbix.entrypoints=websecure"
        - "traefik.http.services.zabbix.loadbalancer.server.port=8080"
        - "traefik.http.routers.zabbix.tls=true"
        - "traefik.http.routers.zabbix.tls.certresolver=letsencrypt"
        - "traefik.http.services.zabbix.loadbalancer.passhostheader=true"
        - "traefik.http.routers.zabbix.middlewares=compresstraefik"
        - "traefik.http.middlewares.compresstraefik.compress=true"
    depends_on:
      - postgres
      - zabbix

  agent:
    <<: *default-opts
    # Image tag (replace with yours)
    image: zabbix/zabbix-agent2:6.2.0-ubuntu
    environment:
      # Zabbix Hostname (replace with yours)
      # Set as DNS name on Zabbix server host configuration screen to make checks of Zabbix server itself
      ZBX_HOSTNAME: zabbix.heyvaldemar.net
      ZBX_SERVER_HOST: 0.0.0.0/0
    networks:
      - zabbix-network
    ports:
      - "10050:10050"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M
    depends_on:
      - postgres
      - zabbix

  backups:
    <<: *default-opts
    # Image tag (replace with yours)
    image: postgres:14
    # Database backups prune interval (replace with yours). Default is 7 days.
    # find /srv/zabbix-postgres/backups -type f -mtime +7 | xargs rm -f

    # Zabbix backups interval (replace with yours). Default is 1 day.
    # sleep 24h

    # Run zabbix-restore-database.sh on the Docker Swarm node where the container for backups is running to restore database if needed.
    # Run docker stack ps zabbix | grep zabbix_backups | awk 'NR > 0 {print $4}' on the Docker Swarm manager node to find on which node container for backups is running.
    command: sh -c 'sleep 30m
             && while true; do
             PGPASSWORD="$$(cat $$POSTGRES_PASSWORD_FILE)"
             pg_dump
             -h postgres
             -p 5432
             -d zabbixdb
             -U zabbixdbuser | gzip > /srv/zabbix-postgres/backups/zabbix-postgres-backup-$$(date "+%Y-%m-%d_%H-%M").gz
             && find /srv/zabbix-postgres/backups -type f -mtime +7 | xargs rm -f;
             sleep 24h; done'
    volumes:
      # Database backups location
      - zabbix-postgres-backups:/srv/zabbix-postgres/backups
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/zabbix-postgres-password
    networks:
      - zabbix-network
    secrets:
      - zabbix-postgres-password
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      # Container resources (replace with yours)
      resources:
        limits:
          cpus: '0.55'
          memory: 1G
        reservations:
          cpus: '0.35'
          memory: 512M
    depends_on:
      - postgres
      - zabbix